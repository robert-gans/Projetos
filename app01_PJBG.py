import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import base64
from io import BytesIO
import math
import os
from PIL import Image
import io
import re

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise de Pre√ßo Justo de Graham - Gans Academy",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para autentica√ß√£o simples
def check_password():
    """Retorna `True` se a senha estiver correta."""
    def password_entered():
        """Verifica se a senha enviada pelo formul√°rio est√° correta."""
        if st.session_state["password"] == "gansacademy":
            st.session_state["password_correct"] = True
            del st.session_state["password"]  # N√£o armazene a senha
        else:
            st.session_state["password_correct"] = False

    # Retorna True se a senha estiver correta ou se j√° foi autenticado
    if "password_correct" in st.session_state and st.session_state["password_correct"]:
        return True

    # Mostra o formul√°rio de entrada de senha
    st.image("logo.png", width=300)
    st.title("An√°lise de Pre√ßo Justo de Graham")
    st.markdown("### Acesso Restrito")
    st.text_input(
        "Digite a senha para acessar a aplica√ß√£o", 
        type="password", 
        key="password",
        on_change=password_entered
    )
    
    if "password_correct" in st.session_state:
        if not st.session_state["password_correct"]:
            st.error("Senha incorreta. Tente novamente.")
    
    return False

# Fun√ß√£o para calcular o pre√ßo justo de Graham
def calcular_preco_justo(lpa, vpa):
    # Verificar se LPA ou VPA s√£o negativos ou zero
    if pd.isna(lpa) or pd.isna(vpa) or lpa <= 0 or vpa <= 0:
        return 0
    return math.sqrt(22.5 * lpa * vpa)

# Fun√ß√£o para encontrar colunas por nome aproximado
def encontrar_coluna(df, nome_coluna):
    # Primeiro, verifica se a coluna existe exatamente como especificada
    if nome_coluna in df.columns:
        return nome_coluna
    
    # Verifica se existe uma coluna com espa√ßos extras
    espacos_possiveis = [f" {nome_coluna}", f"{nome_coluna} ", f" {nome_coluna} "]
    for col in espacos_possiveis:
        if col in df.columns:
            return col
    
    # Verifica se existe uma coluna que cont√©m o nome (case insensitive)
    for col in df.columns:
        if nome_coluna.lower() in col.lower():
            return col
    
    # Se n√£o encontrar, retorna None
    return None

# Fun√ß√£o para limpar nomes de colunas
def limpar_nomes_colunas(df):
    df.columns = [col.strip() for col in df.columns]
    return df

# Fun√ß√£o para converter string num√©rica em formato brasileiro para float
def converter_numero_br(valor):
    if pd.isna(valor) or valor == '':
        return 0.0
    
    # Se j√° for um n√∫mero, retorna ele mesmo
    if isinstance(valor, (int, float)):
        return float(valor)
    
    # Converte para string caso n√£o seja
    valor_str = str(valor)
    
    # Remove caracteres n√£o num√©ricos, exceto ponto e v√≠rgula
    valor_str = re.sub(r'[^\d.,\-]', '', valor_str)
    
    # Verifica se √© um formato com ponto como separador de milhar e v√≠rgula como decimal
    # Exemplo: 1.234,56
    if ',' in valor_str and '.' in valor_str and valor_str.rindex('.') < valor_str.rindex(','):
        # Remove pontos e substitui v√≠rgula por ponto
        valor_str = valor_str.replace('.', '').replace(',', '.')
    
    # Verifica se √© um formato com ponto como separador de milhar e tamb√©m como decimal
    # Exemplo: 2.930.92
    elif '.' in valor_str and valor_str.count('.') > 1:
        # Mant√©m apenas o √∫ltimo ponto como decimal
        ultimo_ponto = valor_str.rindex('.')
        valor_str = valor_str[:ultimo_ponto].replace('.', '') + valor_str[ultimo_ponto:]
    
    # Verifica se √© um formato com v√≠rgula como decimal
    # Exemplo: 1234,56
    elif ',' in valor_str:
        # Substitui v√≠rgula por ponto
        valor_str = valor_str.replace(',', '.')
    
    try:
        return float(valor_str)
    except ValueError:
        st.error(f"N√£o foi poss√≠vel converter o valor '{valor}' para n√∫mero. Formato n√£o reconhecido.")
        return 0.0

# Fun√ß√£o para processar os dados da planilha
def processar_dados(df):
    # Exibir informa√ß√µes de debug
    st.write("Colunas encontradas na planilha:")
    st.write(df.columns.tolist())
    
    # Limpar nomes de colunas
    df = limpar_nomes_colunas(df)
    
    # Exibir informa√ß√µes de debug ap√≥s limpeza
    st.write("Colunas ap√≥s limpeza:")
    st.write(df.columns.tolist())
    
    # Encontrar colunas necess√°rias
    col_ticker = encontrar_coluna(df, "TICKER")
    col_preco = encontrar_coluna(df, "PRECO")
    col_vpa = encontrar_coluna(df, "VPA")
    col_lpa = encontrar_coluna(df, "LPA")
    col_valor_mercado = encontrar_coluna(df, "VALOR DE MERCADO")
    
    # Verificar se todas as colunas foram encontradas
    colunas_faltantes = []
    if not col_ticker:
        colunas_faltantes.append("TICKER")
    if not col_preco:
        colunas_faltantes.append("PRECO")
    if not col_vpa:
        colunas_faltantes.append("VPA")
    if not col_lpa:
        colunas_faltantes.append("LPA")
    
    if colunas_faltantes:
        st.error(f"As seguintes colunas n√£o foram encontradas na planilha: {', '.join(colunas_faltantes)}")
        return None
    
    # Converter colunas para o formato correto
    df[col_ticker] = df[col_ticker].astype(str)
    
    # Mostrar exemplos de valores para debug
    st.write("Exemplos de valores nas colunas num√©ricas:")
    for col in [col_preco, col_vpa, col_lpa]:
        st.write(f"Coluna {col}: {df[col].head().tolist()}")
    
    # Converter colunas num√©ricas usando a fun√ß√£o personalizada
    try:
        df[col_preco] = df[col_preco].apply(converter_numero_br)
        df[col_vpa] = df[col_vpa].apply(converter_numero_br)
        df[col_lpa] = df[col_lpa].apply(converter_numero_br)
        if col_valor_mercado:
            df[col_valor_mercado] = df[col_valor_mercado].apply(converter_numero_br)
    except Exception as e:
        st.error(f"Erro ao converter valores num√©ricos: {str(e)}")
        st.write("Verifique se os valores est√£o em um formato num√©rico v√°lido.")
        return None
    
    # Registrar o n√∫mero total de a√ß√µes antes da limpeza
    total_acoes_inicial = len(df)
    st.write(f"Total de a√ß√µes na planilha original: {total_acoes_inicial}")
    
    # Criar c√≥pias das colunas originais para refer√™ncia
    df['PRECO_ORIGINAL'] = df[col_preco]
    df['VPA_ORIGINAL'] = df[col_vpa]
    df['LPA_ORIGINAL'] = df[col_lpa]
    
    # Identificar registros com valores inv√°lidos
    acoes_preco_invalido = df[df[col_preco] <= 0].shape[0]
    acoes_vpa_invalido = df[df[col_vpa] <= 0].shape[0]
    acoes_lpa_invalido = df[df[col_lpa] <= 0].shape[0]
    
    # Filtrar registros com valores v√°lidos para an√°lise de Graham
    df_valido = df[(df[col_preco] > 0) & (df[col_vpa] > 0) & (df[col_lpa] > 0)].copy()
    
    # Registrar o n√∫mero de a√ß√µes ap√≥s a limpeza
    total_acoes_validas = len(df_valido)
    total_acoes_removidas = total_acoes_inicial - total_acoes_validas
    
    # Exibir resumo da limpeza
    st.write("### Resumo da Limpeza de Dados")
    st.write(f"Total de a√ß√µes removidas: {total_acoes_removidas} ({total_acoes_removidas/total_acoes_inicial*100:.1f}%)")
    st.write(f"- A√ß√µes com pre√ßo zero ou negativo: {acoes_preco_invalido}")
    st.write(f"- A√ß√µes com VPA zero ou negativo: {acoes_vpa_invalido}")
    st.write(f"- A√ß√µes com LPA zero ou negativo: {acoes_lpa_invalido}")
    st.write(f"Total de a√ß√µes v√°lidas para an√°lise: {total_acoes_validas} ({total_acoes_validas/total_acoes_inicial*100:.1f}%)")
    
    # Calcular o pre√ßo justo de Graham apenas para a√ß√µes v√°lidas
    df_valido['PRECO_JUSTO_GRAHAM'] = df_valido.apply(lambda row: calcular_preco_justo(row[col_lpa], row[col_vpa]), axis=1)
    
    # Determinar a avalia√ß√£o
    df_valido['AVALIACAO'] = df_valido.apply(
        lambda row: 'Subavaliada' if row[col_preco] <= row['PRECO_JUSTO_GRAHAM'] else 'Sobreavaliada', 
        axis=1
    )
    
    # Calcular a diferen√ßa percentual
    df_valido['DIFERENCA_PERCENTUAL'] = df_valido.apply(
        lambda row: ((row[col_preco] - row['PRECO_JUSTO_GRAHAM']) / row['PRECO_JUSTO_GRAHAM'] * 100), 
        axis=1
    )
    
    # Adicionar valor de mercado se dispon√≠vel
    if col_valor_mercado:
        df_valido['VALOR_MERCADO'] = df_valido[col_valor_mercado]
    else:
        # Se n√£o tiver valor de mercado, usar um valor padr√£o
        df_valido['VALOR_MERCADO'] = 1000000000  # 1 bilh√£o como padr√£o
    
    # Renomear colunas para melhor visualiza√ß√£o
    colunas_resultado = [col_ticker, col_preco, col_lpa, col_vpa, 'PRECO_JUSTO_GRAHAM', 'AVALIACAO', 'DIFERENCA_PERCENTUAL']
    if col_valor_mercado:
        colunas_resultado.append('VALOR_MERCADO')
    
    df_resultado = df_valido[colunas_resultado].copy()
    
    nomes_colunas = [
        'Ticker', 
        'Pre√ßo Atual', 
        'Lucro por A√ß√£o (LPA)', 
        'Valor Patrimonial por A√ß√£o (VPA)', 
        'Pre√ßo Justo Graham', 
        'Avalia√ß√£o', 
        'Diferen√ßa (%)'
    ]
    
    if col_valor_mercado:
        nomes_colunas.append('Valor de Mercado')
    
    df_resultado.columns = nomes_colunas
    
    return df_resultado

# Fun√ß√£o para criar gr√°fico de compara√ß√£o
def criar_grafico_comparacao(df, tickers_selecionados=None):
    if tickers_selecionados:
        df_plot = df[df['Ticker'].isin(tickers_selecionados)].copy()
    else:
        df_plot = df.copy()
    
    # Ordenar por diferen√ßa percentual
    df_sorted = df_plot.sort_values(by='Diferen√ßa (%)')
    
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # Criar barras para pre√ßo atual e pre√ßo justo
    x = np.arange(len(df_sorted))
    width = 0.35
    
    # Cores baseadas na avalia√ß√£o
    colors_atual = ['#FF6B6B' if aval == 'Sobreavaliada' else '#4CAF50' for aval in df_sorted['Avalia√ß√£o']]
    colors_justo = ['#FFA07A' if aval == 'Sobreavaliada' else '#8BC34A' for aval in df_sorted['Avalia√ß√£o']]
    
    ax.bar(x - width/2, df_sorted['Pre√ßo Atual'], width, label='Pre√ßo Atual', color=colors_atual)
    ax.bar(x + width/2, df_sorted['Pre√ßo Justo Graham'], width, label='Pre√ßo Justo', color=colors_justo)
    
    # Adicionar r√≥tulos e t√≠tulo
    ax.set_xlabel('Ticker', fontweight='bold', fontsize=12)
    ax.set_ylabel('Pre√ßo (R$)', fontweight='bold', fontsize=12)
    ax.set_title('Compara√ß√£o entre Pre√ßo Atual e Pre√ßo Justo de Graham', fontweight='bold', fontsize=14)
    ax.set_xticks(x)
    ax.set_xticklabels(df_sorted['Ticker'], rotation=45, ha='right', fontsize=10)
    ax.legend(fontsize=12)
    
    # Adicionar valores percentuais acima das barras
    for i, ticker in enumerate(df_sorted['Ticker']):
        diferenca = df_sorted['Diferen√ßa (%)'].iloc[i]
        ax.annotate(f'{diferenca:.1f}%', 
                   xy=(i, max(df_sorted['Pre√ßo Atual'].iloc[i], df_sorted['Pre√ßo Justo Graham'].iloc[i]) + 1),
                   ha='center', va='bottom',
                   fontweight='bold',
                   color='red' if diferenca > 0 else 'green')
    
    plt.tight_layout()
    
    return fig

# Fun√ß√£o para criar gr√°fico de pizza para distribui√ß√£o de avalia√ß√µes
def criar_grafico_pizza(df):
    # Contar n√∫mero de a√ß√µes subavaliadas e sobreavaliadas
    contagem = df['Avalia√ß√£o'].value_counts()
    
    # Criar gr√°fico de pizza
    fig, ax = plt.subplots(figsize=(8, 8))
    colors = ['#4CAF50', '#FF6B6B']  # Verde para subavaliadas, vermelho para sobreavaliadas
    
    wedges, texts, autotexts = ax.pie(
        contagem, 
        labels=contagem.index, 
        autopct='%1.1f%%',
        startangle=90,
        colors=colors,
        explode=[0.05, 0] if 'Subavaliada' in contagem.index else [0, 0.05],
        shadow=True
    )
    
    # Estilizar textos
    for text in texts:
        text.set_fontsize(12)
        text.set_fontweight('bold')
    
    for autotext in autotexts:
        autotext.set_fontsize(12)
        autotext.set_fontweight('bold')
        autotext.set_color('white')
    
    ax.set_title('Distribui√ß√£o de A√ß√µes por Avalia√ß√£o', fontsize=16, fontweight='bold')
    
    plt.tight_layout()
    
    return fig

# Fun√ß√£o para criar gr√°fico de dispers√£o
def criar_grafico_dispersao(df):
    # Verificar se temos a coluna de valor de mercado
    if 'Valor de Mercado' not in df.columns:
        # Usar um valor padr√£o se n√£o tivermos o valor de mercado
        df['Valor de Mercado'] = 1000000000  # 1 bilh√£o como padr√£o
    
    # Normalizar o tamanho dos pontos (valor de mercado)
    valor_mercado_max = df['Valor de Mercado'].max()
    df['Tamanho'] = df['Valor de Mercado'] / valor_mercado_max * 100
    
    # Garantir um tamanho m√≠nimo para visualiza√ß√£o
    df['Tamanho'] = df['Tamanho'].apply(lambda x: max(x, 5))
    
    # Criar o gr√°fico de dispers√£o com Plotly
    fig = px.scatter(
        df,
        x='Ticker',
        y='Diferen√ßa (%)',
        size='Tamanho',
        color='Avalia√ß√£o',
        hover_name='Ticker',
        color_discrete_map={'Subavaliada': '#4CAF50', 'Sobreavaliada': '#FF6B6B'},
        hover_data={
            'Ticker': True,
            'Pre√ßo Atual': True,
            'Pre√ßo Justo Graham': True,
            'Diferen√ßa (%)': ':.2f',
            'Valor de Mercado': ':,.2f',
            'Tamanho': False  # N√£o mostrar a coluna de tamanho normalizado
        },
        title='Dispers√£o de A√ß√µes por Diferen√ßa Percentual',
        height=600
    )
    
    # Adicionar linha horizontal em 0%
    fig.add_shape(
        type='line',
        x0=0,
        y0=0,
        x1=1,
        y1=0,
        xref='paper',
        line=dict(color='black', width=2, dash='dash')
    )
    
    # Personalizar o layout
    fig.update_layout(
        xaxis_title='Ticker',
        yaxis_title='Diferen√ßa (%)',
        legend_title='Avalia√ß√£o',
        font=dict(size=12),
        xaxis={'categoryorder': 'total ascending'},
        plot_bgcolor='rgba(240, 240, 240, 0.5)',
        hoverlabel=dict(bgcolor="white", font_size=12),
        margin=dict(l=20, r=20, t=60, b=20)
    )
    
    # Adicionar anota√ß√µes explicativas
    fig.add_annotation(
        x=0.5,
        y=50,
        xref='paper',
        text="Sobreavaliadas",
        showarrow=False,
        font=dict(size=14, color="#FF6B6B")
    )
    
    fig.add_annotation(
        x=0.5,
        y=-50,
        xref='paper',
        text="Subavaliadas",
        showarrow=False,
        font=dict(size=14, color="#4CAF50")
    )
    
    return fig

# Fun√ß√£o para converter o DataFrame para CSV
def convert_df_to_csv(df):
    return df.to_csv(index=False).encode('utf-8')

# Fun√ß√£o para aplicar estilo √† tabela
def highlight_rows(s):
    if s['Avalia√ß√£o'] == 'Sobreavaliada':
        return ['background-color: #FFCCCC'] * len(s)
    else:
        return ['background-color: #CCFFCC'] * len(s)

# Aplica√ß√£o principal
def main():
    # Carregar logo
    logo = Image.open("logo.png")
    
    # Sidebar com logo
    st.sidebar.image(logo, width=200)
    st.sidebar.title("Gans Academy")
    st.sidebar.markdown("---")
    st.sidebar.markdown("### Sobre a An√°lise")
    st.sidebar.markdown("""
    Esta aplica√ß√£o utiliza a f√≥rmula de Benjamin Graham para calcular o pre√ßo justo de a√ß√µes.
    
    **F√≥rmula utilizada:**
    ```
    Pre√ßo Justo = ‚àö(22,5 √ó LPA √ó VPA)
    ```
    
    Onde:
    - LPA: Lucro por A√ß√£o
    - VPA: Valor Patrimonial por A√ß√£o
    
    **Importante:** A f√≥rmula s√≥ √© aplic√°vel para a√ß√µes com LPA e VPA positivos.
    A√ß√µes com valores negativos ou zero s√£o exclu√≠das da an√°lise.
    """)
    
    st.sidebar.markdown("---")
    st.sidebar.markdown("### Como usar")
    st.sidebar.markdown("""
    1. Acesse o site [Status Invest](https://statusinvest.com.br/)
    2. V√° para a se√ß√£o de "Busca Avan√ßada" de a√ß√µes
    3. Configure os filtros desejados
    4. Clique em "Buscar"
    5. No resultado, clique em "Exportar" para baixar a planilha CSV
    6. Fa√ßa upload da planilha nesta aplica√ß√£o
    7. Analise os resultados e filtre conforme necess√°rio
    """)
    
    st.sidebar.markdown("---")
    st.sidebar.markdown("Desenvolvido por Gans Academy")
    st.sidebar.markdown("[gans-academy.com](https://gans-academy.com)")
    
    # T√≠tulo principal
    st.title("An√°lise de Pre√ßo Justo de Graham")
    st.markdown("### Descubra se suas a√ß√µes est√£o sub ou sobreavaliadas")
    
    # Op√ß√µes de upload
    st.subheader("Upload da planilha")
    st.markdown("""
    Fa√ßa upload da planilha CSV exportada do Status Invest. 
    A aplica√ß√£o foi otimizada para lidar com diferentes formatos de planilha e n√∫meros.
    
    **Nota importante:** A√ß√µes com LPA ou VPA negativos ou zero ser√£o exclu√≠das da an√°lise,
    pois a f√≥rmula de Graham n√£o √© aplic√°vel nesses casos.
    """)
    
    # Upload da planilha
    uploaded_file = st.file_uploader("Fa√ßa upload da planilha CSV do Status Invest", type=["csv"])
    
    # Op√ß√µes de separador
    separador = st.selectbox(
        "Selecione o separador usado na planilha:",
        options=[";", ",", "\\t", "|"],
        index=0,
        help="O separador padr√£o do Status Invest √© ponto e v√≠rgula (;)"
    )
    
    # Mapeamento de separadores
    separadores = {
        ";": ";",
        ",": ",",
        "\\t": "\t",
        "|": "|"
    }
    
    if uploaded_file is not None:
        try:
            # Exibir informa√ß√µes sobre o arquivo
            st.write(f"Arquivo carregado: {uploaded_file.name}")
            
            # Ler as primeiras linhas para debug
            conteudo = uploaded_file.read().decode('utf-8')
            primeiras_linhas = "\n".join(conteudo.split("\n")[:5])
            st.write("Primeiras linhas do arquivo:")
            st.code(primeiras_linhas)
            
            # Resetar o ponteiro do arquivo
            uploaded_file.seek(0)
            
            # Ler o arquivo CSV com o separador selecionado
            df = pd.read_csv(uploaded_file, sep=separadores[separador])
            
            # Processar os dados
            df_resultados = processar_dados(df)
            
            if df_resultados is not None and not df_resultados.empty:
                # Exibir informa√ß√µes sobre os dados
                st.success(f"An√°lise conclu√≠da para {len(df_resultados)} a√ß√µes v√°lidas!")
                
                # Op√ß√µes de filtragem
                st.subheader("Filtros")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    filtro_avaliacao = st.multiselect(
                        "Filtrar por avalia√ß√£o:",
                        options=["Todas", "Subavaliada", "Sobreavaliada"],
                        default=["Todas"]
                    )
                
                with col2:
                    min_preco = st.number_input("Pre√ßo m√≠nimo:", min_value=0.0, value=0.0, step=1.0)
                    max_preco = st.number_input("Pre√ßo m√°ximo:", min_value=0.0, value=1000.0, step=10.0)
                
                with col3:
                    min_diferenca = st.number_input("Diferen√ßa % m√≠nima:", min_value=-100.0, value=-100.0, step=5.0)
                    max_diferenca = st.number_input("Diferen√ßa % m√°xima:", min_value=-100.0, value=100.0, step=5.0)
                
                # Aplicar filtros
                df_filtrado = df_resultados.copy()
                
                if "Todas" not in filtro_avaliacao:
                    df_filtrado = df_filtrado[df_filtrado["Avalia√ß√£o"].isin(filtro_avaliacao)]
                
                df_filtrado = df_filtrado[
                    (df_filtrado["Pre√ßo Atual"] >= min_preco) & 
                    (df_filtrado["Pre√ßo Atual"] <= max_preco) &
                    (df_filtrado["Diferen√ßa (%)"] >= min_diferenca) &
                    (df_filtrado["Diferen√ßa (%)"] <= max_diferenca)
                ]
                
                # Exibir resultados
                st.subheader("Resultados")
                
                if df_filtrado.empty:
                    st.warning("Nenhuma a√ß√£o encontrada com os filtros selecionados.")
                else:
                    # Formatar a tabela
                    df_display = df_filtrado.copy()
                    
                    # Formatar colunas num√©ricas
                    df_display['Pre√ßo Atual'] = df_display['Pre√ßo Atual'].map('R$ {:.2f}'.format)
                    df_display['Lucro por A√ß√£o (LPA)'] = df_display['Lucro por A√ß√£o (LPA)'].map('R$ {:.2f}'.format)
                    df_display['Valor Patrimonial por A√ß√£o (VPA)'] = df_display['Valor Patrimonial por A√ß√£o (VPA)'].map('R$ {:.2f}'.format)
                    df_display['Pre√ßo Justo Graham'] = df_display['Pre√ßo Justo Graham'].map('R$ {:.2f}'.format)
                    df_display['Diferen√ßa (%)'] = df_display['Diferen√ßa (%)'].map('{:.2f}%'.format)
                    
                    if 'Valor de Mercado' in df_display.columns:
                        df_display['Valor de Mercado'] = df_display['Valor de Mercado'].map('R$ {:.2f}'.format)
                    
                    # Aplicar estilo √† tabela
                    st.dataframe(df_display.style.apply(highlight_rows, axis=1))
                    
                    # Visualiza√ß√µes gr√°ficas
                    st.subheader("Visualiza√ß√µes Gr√°ficas")
                    
                    # Gr√°fico de dispers√£o
                    st.write("### Gr√°fico de Dispers√£o (Diferen√ßa Percentual)")
                    st.write("""
                    Este gr√°fico mostra a distribui√ß√£o das a√ß√µes de acordo com a diferen√ßa percentual entre o pre√ßo atual e o pre√ßo justo.
                    O tamanho de cada ponto √© proporcional ao valor de mercado da empresa.
                    Pontos acima da linha central (0%) representam a√ß√µes sobreavaliadas, enquanto pontos abaixo representam a√ß√µes subavaliadas.
                    """)
                    
                    fig_dispersao = criar_grafico_dispersao(df_filtrado)
                    st.plotly_chart(fig_dispersao, use_container_width=True)
                    
                    # Sele√ß√£o de tickers para visualiza√ß√£o gr√°fica de barras
                    st.write("### Gr√°fico de Compara√ß√£o (Pre√ßo Atual vs Pre√ßo Justo)")
                    
                    # Limitar a 20 tickers para melhor visualiza√ß√£o
                    if len(df_filtrado) > 20:
                        st.info("Selecione at√© 20 tickers para visualiza√ß√£o gr√°fica:")
                        tickers_selecionados = st.multiselect(
                            "Tickers:",
                            options=df_filtrado["Ticker"].tolist(),
                            default=df_filtrado.sort_values(by="Diferen√ßa (%)")["Ticker"].head(10).tolist()
                        )
                    else:
                        tickers_selecionados = df_filtrado["Ticker"].tolist()
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        if tickers_selecionados:
                            fig_barras = criar_grafico_comparacao(df_filtrado, tickers_selecionados)
                        else:
                            fig_barras = criar_grafico_comparacao(df_filtrado.head(20))
                        st.pyplot(fig_barras)
                    
                    with col2:
                        fig_pizza = criar_grafico_pizza(df_filtrado)
                        st.pyplot(fig_pizza)
                    
                    # Bot√£o para download
                    csv = convert_df_to_csv(df_filtrado)
                    st.download_button(
                        label="Baixar resultados como CSV",
                        data=csv,
                        file_name='analise_graham_filtrada.csv',
                        mime='text/csv',
                    )
                    
                    # Resumo da an√°lise
                    st.subheader("Resumo da An√°lise")
                    total_acoes = len(df_filtrado)
                    acoes_subavaliadas = len(df_filtrado[df_filtrado['Avalia√ß√£o'] == 'Subavaliada'])
                    acoes_sobreavaliadas = len(df_filtrado[df_filtrado['Avalia√ß√£o'] == 'Sobreavaliada'])
                    
                    col1, col2, col3 = st.columns(3)
                    col1.metric("Total de A√ß√µes Analisadas", total_acoes)
                    col2.metric("A√ß√µes Subavaliadas", acoes_subavaliadas, f"{acoes_subavaliadas/total_acoes*100:.1f}%")
                    col3.metric("A√ß√µes Sobreavaliadas", acoes_sobreavaliadas, f"{acoes_sobreavaliadas/total_acoes*100:.1f}%")
                    
                    # Estat√≠sticas adicionais
                    st.subheader("Estat√≠sticas")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("#### A√ß√µes mais subavaliadas")
                        df_sub = df_filtrado[df_filtrado['Avalia√ß√£o'] == 'Subavaliada'].sort_values(by='Diferen√ßa (%)')
                        if not df_sub.empty:
                            st.table(df_sub.head(5)[['Ticker', 'Pre√ßo Atual', 'Pre√ßo Justo Graham', 'Diferen√ßa (%)']])
                        else:
                            st.info("Nenhuma a√ß√£o subavaliada encontrada.")
                    
                    with col2:
                        st.markdown("#### A√ß√µes mais sobreavaliadas")
                        df_sobre = df_filtrado[df_filtrado['Avalia√ß√£o'] == 'Sobreavaliada'].sort_values(by='Diferen√ßa (%)', ascending=False)
                        if not df_sobre.empty:
                            st.table(df_sobre.head(5)[['Ticker', 'Pre√ßo Atual', 'Pre√ßo Justo Graham', 'Diferen√ßa (%)']])
                        else:
                            st.info("Nenhuma a√ß√£o sobreavaliada encontrada.")
        
        except Exception as e:
            st.error(f"Ocorreu um erro ao processar a planilha: {str(e)}")
            st.markdown("""
            **Poss√≠veis raz√µes:**
            - Formato da planilha diferente do esperado
            - Problemas com os dados (valores ausentes, formato incorreto)
            - Erro interno da aplica√ß√£o
            
            **Sugest√µes:**
            - Tente selecionar um separador diferente
            - Verifique se a planilha est√° no formato correto (CSV do Status Invest)
            - Certifique-se de que as colunas necess√°rias existem e est√£o preenchidas
            """)
    else:
        st.info("""
        ### Como obter a planilha do Status Invest:
        
        1. Acesse o site [Status Invest](https://statusinvest.com.br/)
        2. V√° para a se√ß√£o de "Busca Avan√ßada" de a√ß√µes
        3. Configure os filtros desejados
        4. Clique em "Buscar"
        5. No resultado, clique em "Exportar" para baixar a planilha CSV
        6. Fa√ßa upload da planilha nesta aplica√ß√£o
        
        A aplica√ß√£o calcular√° automaticamente o pre√ßo justo de Graham para todas as a√ß√µes na planilha.
        """)
        
        # Mostrar exemplo de an√°lise
        # st.subheader("Exemplo de an√°lise")
        # st.image("exemplo_analise.png", caption="Exemplo de an√°lise com dados do Status Invest")

# Executar a aplica√ß√£o
if __name__ == "__main__":
    if check_password():
        main()
